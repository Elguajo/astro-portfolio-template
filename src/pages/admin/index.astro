---
import tinaConfig from '../../../tina/config';
import { TinaAdmin } from 'tinacms';

export const prerender = false;

const missingCloudCredentials =
  !tinaConfig.clientId?.length || !tinaConfig.token?.length;
const canRenderAdmin = import.meta.env.MODE === 'development' || !missingCloudCredentials;
---

{canRenderAdmin ? (
  <TinaAdmin config={tinaConfig} schemaJson={tinaConfig.schema} />
) : (
  <div class="mx-auto flex min-h-screen max-w-2xl flex-col items-center justify-center gap-6 px-6 text-center">
    <h1 class="text-3xl font-semibold">TinaCMS configuration required</h1>
    <p class="text-base text-gray-500">
      Add <code>TINA_PUBLIC_CLIENT_ID</code> and <code>TINA_TOKEN</code> to your environment before deploying.
    </p>
    <ol class="list-decimal space-y-2 text-left text-base text-gray-600">
      <li>
        Copy <code>.env.example</code> to <code>.env</code> and provide the Tina Cloud credentials from your project dashboard.
      </li>
      <li>
        Re-run <code>npm run tina:build</code> to regenerate the admin bundle inside <code>public/admin</code>.
      </li>
      <li>
        Deploy the site again once the admin bundle has been rebuilt.
      </li>
    </ol>
    <p class="text-sm text-gray-500">
      Local development still works with <code>npm run tina:dev</code> even without cloud credentials.
    </p>
  </div>
)}
